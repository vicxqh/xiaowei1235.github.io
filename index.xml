<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>萧七海的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 萧七海的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Dec 2019 13:26:45 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Udp</title>
      <link>http://localhost:1313/post/net/udp/</link>
      <pubDate>Fri, 20 Dec 2019 13:26:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/net/udp/</guid>
      
        <description>&lt;h1 id=&#34;heading&#34;&gt;协议特点&lt;/h1&gt;
&lt;p&gt;简单地对IP协议进行了一层包裹，添加了源、目的地端口，从而支持了多路复用、多路分解. 协议本身没有流控测流和拥塞控制策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/udp-header.png&#34; alt=&#34;UDP 包头&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首部小， UDP 8字节， TCP20字节&lt;/li&gt;
&lt;li&gt;应用层能更加精确地控制发送数据的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;缺点，使用注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;不可靠。协议本身不保证应用层的数据，一定能完全达到目的地。但是每个UDP 包裹本身是数据是不会出错（UDP本身有校验和）&lt;/li&gt;
&lt;li&gt;在网络上可能被很多节点的防火墙禁用掉&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;udp&#34;&gt;常见的使用UDP的应用层协议&lt;/h2&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;h1 id=&#34;golang-udp-server&#34;&gt;golang 实现简单的UDP server&lt;/h1&gt;
&lt;p&gt;可以自己手动定义协议，但是考虑到易用性和以后升级的需要，可以简单得使用protobuf 来定义以及序列化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Serve &amp;quot;监听&amp;quot;一个UDP端口，如&amp;quot;0.0.0.0:9527&amp;quot;
func (s *SimpleUDPServer) Serve(address string) error {
	c, err := net.ListenPacket(&amp;quot;udp&amp;quot;, address)
	if err != nil {
		return err
	}
	s.conn = c
	for {
        // 如果会使用到公网，UDP的包尽量不要太大, 500 字节内为宜
        // https://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
        // 这里的maxBufferSize 应该 &amp;gt; 你设计的协议中最大包的大小
		buffer := make([]byte, maxBufferSize)
		n, addr, err := s.conn.ReadFrom(buffer)
		if err != nil {
			logs.Error(&amp;quot;failed to receive udp packet: %v&amp;quot;, err)
			continue
		}

        // 新启一个goroutine 来处理请求。主goroutine 不处理除了接受包之外的其它任何
		go s.handleRequest(buffer[:n], addr)
	}
	return nil
}

func (s *SimpleUDPServer) handleRequest(data []byte, addr net.Addr) {
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
