<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>萧七海的博客</title>
    <link>http://auntlei.com/</link>
    <description>Recent content on 萧七海的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 11 Mar 2020 21:05:17 +0800</lastBuildDate>
    
        <atom:link href="http://auntlei.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://auntlei.com/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://auntlei.com/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>《事实》--实事求是地认识世界</title>
      <link>http://auntlei.com/post/reading/factness/</link>
      <pubDate>Wed, 11 Mar 2020 21:05:17 +0800</pubDate>
      
      <guid>http://auntlei.com/post/reading/factness/</guid>
      
        <description>&lt;p&gt;年初国内爆发了新型冠状病毒，各类自媒体也借此获得了不少流量。他们其中既有天下兴亡匹夫有责的义士、也不乏靠宣传骇人听闻的事件来激发人类最原始的恐惧从而增加自己公众号曝光的奸诈之徒。在一篇新冠病毒科普文章中，作者推荐了汉斯的这本《事实》。今天，我终于在工作之余拜读完这本注定对我世界观产生重大影响的著作。&lt;/p&gt;
&lt;p&gt;《事实》总结了人们认识世界时的十大误区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一分为二&lt;/p&gt;
&lt;p&gt;很多事物不是只有两个极端划分。比如，世界上不只是穷人和富人这两种截然对立的划分。人数最多的是中等收入群体。这点对于工科生比较好理解，想象一下正态分布的图形就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负面思维&lt;/p&gt;
&lt;p&gt;媒体总是报到负面的事件，因为这些事件才具有新闻报到的价值，才能吸引读者，才能在同行竞争中生存。但是我们更应该注意到，虽然世界上还有很多糟糕的时不时发生，但是世界整体是朝着更好的方向发展，在波动中上升。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直线思维&lt;/p&gt;
&lt;p&gt;很多事情的发展规律不是直线。比如传染病，是一种指数函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恐惧本能&lt;/p&gt;
&lt;p&gt;总是担心最坏的事情。其实这个和理财类似，买彩票虽然在最好的情况下收益巨大，但是期望收益为负。很多人很奇怪，对于低概率的事件，如果事件本身是一件好事，他会觉得不可能发生在自己身上；但是如果这是一件很差很危险很可怕的事，他就表现的像一定会发生样。“过度关注可怕的而不是危险的事情，就意味着我们把自己宝贵的注意力放在了错误的方向。”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规模错觉&lt;/p&gt;
&lt;p&gt;二八原则。少数人/事会占据绝大部分的资源。我们应该着眼于优化这些资源占比高的项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以偏概全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命中注定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单一视角&lt;/p&gt;
&lt;p&gt;评价一个事务关关注事务的全貌，而不是个别细枝末节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归咎他人&lt;/p&gt;
&lt;p&gt;要从本质上分析原因，而不是快速地将错误归咎于某人，某组织。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;情急生乱&lt;/p&gt;
&lt;p&gt;这点极其重要，人在情急的时候会产生两种本能反应：要么瞎选，要么放弃思考。其实很多事情不是想象中那么急，事情也不是简单的一分为二非好即坏。&lt;strong&gt;情况再紧急，我们也要基于数据做分析，最重要的是永远不能放弃思考&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书中有很多详细地解释和例子，希望有缘读到这篇笔记的朋友一定抽空读读这本《事实》。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>我的基金定投计划</title>
      <link>http://auntlei.com/post/misc/etf/</link>
      <pubDate>Mon, 20 Jan 2020 07:12:29 +0800</pubDate>
      
      <guid>http://auntlei.com/post/misc/etf/</guid>
      
        <description>&lt;h2 id=&#34;heading&#34;&gt;为什么要做定投？&lt;/h2&gt;
&lt;p&gt;我目前投资方式比较简单，基本上以招商银行的定期理财为主，年化收益率&lt;strong&gt;接近4%&lt;/strong&gt;，剩余部分则是一些T+0或者T+1的货币基金，比如支付宝，收益更低&lt;strong&gt;不到3%&lt;/strong&gt;。而&lt;a href=&#34;https://www.ceicdata.com/zh-hans/indicator/china/consumer-price-index-cpi-growth&#34;&gt;2019-12 CPI已经高到4.5%&lt;/a&gt;，跑输了通胀。 决定要参入到股市之中，承担市场经济发展的风险，也享受相等的回报。之前短暂的做过短线，赶上大盘整体回升，收益还不错，也明显跑赢了大盘，但是需要的精力太多，目前看来没有足够的精力继续操作短线。想参入股市，那我目前的选择只能是投资基金。基金做短线，收益不大，因为我只参与指数基金，而指数基金的短期振幅不会很大，没有盈利空间。如果花时间挑选一些其它板块、主题的基金，找出振幅大的，那还不如花时间做个股的短线。综上我决定定投指数基金，作为一种长期的理财方式。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;场内基金还是场外基金？&lt;/h2&gt;
&lt;p&gt;为方便比较，找一个常见的沪深300类的场外基金做对比。&lt;/p&gt;
&lt;p&gt;天弘沪深300ETF链接C， 买入费率0，管理费0.5%（每年），托管费0.1%（每年），销售服务费0.2%（每年），持有天数&amp;gt;7日则卖出费率为0，那么持有1年，3年，5年的大致费率为，0.8%，2.4%， 4%。&lt;/p&gt;
&lt;p&gt;如果我们直接购买300ETF，假设每次定投金额小于1万，则收取5元的佣金（ETF只收取佣金，没有印花税、过户费之类），如果是1000元的ETF， 那么持有1年、3年、5年的费率大致为， 1%, 1%, 1%。如果一次购买约2000的ETF， 则费率降低至0.5%， 0.5%， 0.5%。&lt;/p&gt;
&lt;p&gt;从上面的对比中可以看出&lt;strong&gt;直接购买ETF有明显的费率优势，这种优势会随着持有时间的增加和投资金额的增大而愈发明显&lt;/strong&gt;。既然我打算长期定投，那我肯定&lt;strong&gt;选择ETF&lt;/strong&gt;了。当然由于像股票一样，ETF的买卖单位是100份的整数倍，操作起来相对会麻烦一点。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;定投方式与金额&lt;/h2&gt;
&lt;p&gt;由于时间精力有限，并且计划长期定投，所以我决定只关注300ETF和500ETF。既然是投资，那么一定不能囫囵吞枣，更不能道听途说，一定要想明白什么情况下能赚钱，什么情况下亏损的可能性大。&lt;/p&gt;
&lt;p&gt;投资赚钱的本质是&lt;strong&gt;低买高卖&lt;/strong&gt;。实际操作中的难点在于未来的不确定性。高和低是相对概念，没有绝对值可以参考，因为未来的不确定性、低买高卖就是一种博弈。是期望值和实际值之间的博弈，是一种赌博。&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;定投是怎么运作的，怎么选择定投目标，什么时候卖出？&lt;/h3&gt;
&lt;p&gt;定投最根本的假设是，&lt;strong&gt;市场是波动的&lt;/strong&gt;。通过定时定额（投资金额）的投资投资方式，在市价低时候多买入，而在市价高少买入，从而在整体上降低持仓成本，降低亏损的风险，当然利益相对最优解也会变少。&lt;strong&gt;可以这么理解，市场的振幅越大，定投的收益空间越大&lt;/strong&gt;。这个很好理解，如果市场毫无波澜，那么定投根本没有盈利空间，反而会亏损手续费，另外只要收益率低于银行定期存款的其实都是亏损。反之，假设市场是波动的，举个比较简单的具体例子，假设市价按照1、2、1、2这样周期性波动，那么定投的持仓成本就接近于1.5，只要市场保持波动，那么我们就有在市价为2的时候出手的机会，也就有盈利的机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;市场必然是波动的&lt;/strong&gt;，只要我们有耐心（对定投的这笔资金流动性要求不高），我们就能等到卖出价高于持仓成本的时机。当然这个前提你选的基本不能在你的投资周期内整体上程明显的下跌趋势。我们需要一个&lt;strong&gt;具有周期性&lt;/strong&gt;的基金来做定投，而指数基金就是一个不错的选择。&lt;em&gt;TODO：有空我会花的时间研究下其它的基金，说不定有同样具有稳定周期，但是周期性更短的基金&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;heading-4&#34;&gt;上证综合指数变化&lt;/h3&gt;
&lt;p&gt;从2001年初到2019年底之间，出现了两个牛市。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200116133847.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再看近几年，最高点在2015.06 为5178。这波牛市持续了半年，成交量大市场活跃。之后跳水，从2016.01至今没有太大波澜。2019年年初市场活跃了一波。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200116134935.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我们假设再过3年，能再一次达到5000点的顶峰，如果持仓成本4000，那么年化8%左右。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上证综合指数为参考，我们观察下300ETF，和500ETF&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;300ETF&lt;/strong&gt;，处于较危险的高位。如果三年内从4.0 升到5.0，持仓成本按照4.5计算的话，那么收益率为3.7%左右。照这样的估算方式，似乎没有太盈利空间。&lt;strong&gt;目前计划 3.7 以下才做买入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200119132608.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;500ETF&lt;/strong&gt;，似乎还很有空间。如果三年内从6.0升到9.0，持仓成本按照7.5计算的话，那么收益率为6.7%左右。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200119132735.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-5&#34;&gt;综上、具体操作方式&lt;/h3&gt;
&lt;h4 id=&#34;heading-6&#34;&gt;买入&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定投时间为发放工资的下个交易日&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以500ETF为主，2k左右做“定投”。正常情况以成交价&amp;lt;=2k为界（基本上就是3手），如果价格低于5.8则买4手（稍大于2K）。 平时（非定投范围）如果遇到&amp;lt;5的情况，时情况加仓1~2手。
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200119134608.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;300ETF不做定投，按月观察，如果市价＜3.7 （理想情况&amp;lt;3.5）视情况买入3手，单月最多投资一次。&lt;/p&gt;
&lt;h4 id=&#34;heading-7&#34;&gt;卖出&lt;/h4&gt;
&lt;p&gt;由于市场周期性的存在，我们需要在一个合适时间点将基金卖出，从而尽可能的实现利益最大化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;300ETF&lt;/strong&gt;4.3是一个参考点。&lt;br&gt;
&lt;strong&gt;500ETF&lt;/strong&gt;7.0， 8.0，9.0 三个参考点，要求年化&amp;gt;10%&lt;br&gt;
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200120073806.png&#34; alt=&#34;&#34;&gt;
&lt;strong&gt;调整心态，不求最优解&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>活出生命的意义</title>
      <link>http://auntlei.com/post/reading/meaning_of_life/</link>
      <pubDate>Sun, 12 Jan 2020 17:04:39 +0800</pubDate>
      
      <guid>http://auntlei.com/post/reading/meaning_of_life/</guid>
      
        <description>&lt;p&gt;前阵子从同事那买入了一个二手kindle，我那模糊的愿望单里又划掉了一条项目，内心喜悦溢于言表。这是继ipad，mac之后又一个读书时的“奢望”被满足，当然高兴！本着物尽其用的朴素思想，也趁着这新入手的高兴劲，装一个读书人。这一口气便读了三本书。&lt;/p&gt;
&lt;p&gt;《活着》，简简单单两个字是书名也是对整本书最好的概括。主人翁福贵出生地主家庭，是典型的纨绔子弟，不学无术、噬赌成命，终于败光所有家业一贫如洗。人在遭遇这种大变故时，都容易产生轻生的想法。不过想法归想法，很多人还是选择“活着”。福贵也活着面对接下来的清苦生活，也面对了后来命运对他的一切捉弄——出门给病危的老娘买药却被抓壮丁，好不容易从战场活着回来，可是老娘已经去世大女儿也因为一场意外变成了聋哑人。到后来的大饥荒、大跃进、以及文化大革命，命运持续不断地捉弄着这个苦命人，最后落得孤家寡人一枚。活着是福贵最朴素的思想，支撑他承受着命运的酸甜苦辣。但是人不应该只是“活着”，而是应该活出生命的意义。&lt;/p&gt;
&lt;p&gt;《活出生命的意义》是弗兰克尔对生命的思考，这种思考最终帮助他从纳粹集中营幸存下来。这本书不是一部文学作品，而是一部心理学作品。书的前半部分是对自己在集中营经历的描述，在描述的过程中阐述自己的的心里学观点。而后半部分则是对意义疗法的总结和实践指导。想帮助一个人活下去，就帮助他找到生命的意义，这个意义可以很简单，就是一个简单的责任，比如许三观对家庭的责任。&lt;/p&gt;
&lt;p&gt;看了余华的《活着》觉得意犹未尽，于是又拜读了他的另一部经典著作，《许三观卖血记》。与《活着》充满了生活的沉重感不同，《许三观卖血记》在艰苦中透露着希望。当生活中有迈不过去的砍时，总是可以通过卖血这一离谱的生意来渡过。卖血之所以离谱是因为一次卖血35块钱，已经超过了一户农民一年的所得。这钱来得太容易，就好比摇钱树一般，但实际上确实用命在赌博。第一次读到许三观去卖血，我就担心他会染上严重的传染病，可许三观是幸运的。这使得读这本书的时候轻松不少。许三观是刀子嘴、豆腐心，在邻里有难之时还是愿意帮忙。不过虽然帮忙、但是嘴上依旧咄咄逼人、这些描写十分有趣。&lt;/p&gt;
&lt;p&gt;虽然有了kindle，可是我也快而立之年了，生命的意义当然不是拥有一个kindle、或者其它新奇的电子产品。那生命的意义是什么？娶妻生子、传宗接代？这些可以是人生路上的必经路，但是不应该是朝着终点行进的动力源泉。我还不知道人生的意义，但是有一点是明确的，我必须自己做选择，然后承担后果。我一定要保持自己的精神自由，选择自己的性格，自己的道德，哪怕处于何种苦痛和压迫之中。物质能影响选择的难度，但不能决定选择的结果。最简单地，当我快控制不住自己的脾气时，当我内心产生冲动时，一定要想想这是我想象中的我应有的行为吗？人活着如果不思考，不规划，只是被环境驱使，那就和羊群中的羊没有区别，生存的意义也不再属于自己。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>经典论文导读系列之：facebook haystack</title>
      <link>http://auntlei.com/post/paper/haystack/</link>
      <pubDate>Sun, 29 Dec 2019 21:05:45 +0800</pubDate>
      
      <guid>http://auntlei.com/post/paper/haystack/</guid>
      
        <description>&lt;p&gt;facebook 09年发表的存储系统haystack，主要是优化海量小文件（图片）的访问效率，其核心思想是减少定位文件inode所需要的磁盘操作。通过回顾文件访问的相关的基础知识，我们也就能理解haystack的动机，以及之所以能提升性能的根本原因。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;基础知识回顾&lt;/h2&gt;
&lt;p&gt;在介绍linux文件系统之前，有必要简单回顾一下HDD，haystack论文的性能测试也是在HDD之上进行。SSD相对HDD最显著的提升是随机访问性能的质变，SSD的成本越来越低，容量也越来越大，但是目前HDD的价格优势依旧明显，在企业存储中仍占据主要地位。&lt;/p&gt;
&lt;h3 id=&#34;hdd&#34;&gt;机械磁盘HDD&lt;/h3&gt;
&lt;p&gt;选择性地忽略磁盘的一些无关硬件细节（比如远近圆心扇区存储介质密度差异）而只关注影响应用开发的抽象逻辑。那么，如&lt;a href=&#34;&#34;&gt;下图&lt;/a&gt;所示，机械磁盘主要包含一组“共进退”的机械臂和若干双面的碟片组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191229232729.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;更为简化地，我们实际只需要关注如下图中概念。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191229235404.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特意画出&lt;strong&gt;机械臂&lt;/strong&gt;是为了强调移动是缓慢的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;扇区（Sector），磁盘I/O的最小单位，驱动程序对磁盘的读写操作都是读写一整个扇区，驱动程序能保证对整个扇区操作的原子性。过去512Byte的扇区比较常见，但是现在4K大小的扇区逐渐成为主流（4k也是常规linux一个页的大小）。而一条磁道（track）上有许多扇区。&lt;/p&gt;
&lt;p&gt;影响磁盘读写速度的主要有两个因素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻道+寻址时间，移动机械臂使磁头位于对应磁道之上再转动碟片使得磁头位于对应扇区上的时间。&lt;/li&gt;
&lt;li&gt;读写速度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以从&lt;a href=&#34;https://gist.github.com/jboner/2841832&#34;&gt;下表&lt;/a&gt;中大致知道HDD的性能与其它存储介质的差距。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Latency Comparison Numbers (~2012)
--------------------------
Main memory reference                      100   ns
Send 1 KB bytes over 1 Gbps network     10,000   ns       10 us
Read 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms 
Read 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD
Read 1 MB sequentially from disk    30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;寻址（含寻道）时间10ms，而连续读取1MB（以512B算，2K个扇区）的数据却只需要30ms。&lt;strong&gt;机械磁盘的平均寻道时间是不可忽略的&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux&#34;&gt;Linux文件系统与文件查找&lt;/h3&gt;
&lt;p&gt;提及Linux文件系统，必然绕不开VFS（Virtual Filesystem Switch）。VFS对下为不同具体的文件系统抽象出一套通用的数据结构和操作函数，对上为用户态应用层程序屏蔽底层文件系统的细节而使用一套通用的接口进行交互。注意，本问题及的文件系统均指非纯内存的文件系统，如ext2、nfs等，而类似procfs、sysfs、tmpfs这种纯内存文件系统不在本文的讨论范围，也不是haystack论文优化的对象。&lt;/p&gt;
&lt;p&gt;VFS定义了四个基本对象，&lt;em&gt;superblock&lt;/em&gt;, &lt;em&gt;inode&lt;/em&gt;, &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;dentry&lt;/em&gt;。其中：&lt;em&gt;superblock&lt;/em&gt; 用于描述&lt;strong&gt;文件系统&lt;/strong&gt;的元信息；&lt;em&gt;inode&lt;/em&gt; 用于描述&lt;strong&gt;文件&lt;/strong&gt;的元信息(如大小等）；&lt;em&gt;file&lt;/em&gt; 对象和具体进程关联，表示其&lt;strong&gt;打开&lt;/strong&gt;的一个文件和该进程关系（如打开方式、当前读写位置等）；&lt;em&gt;dentry&lt;/em&gt; 表示一个具体的目录项与实际文件的关系（指向某个_inode_）。这四者和进程间的关系如下图所示。
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200130114445.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体地，对于每个应用程序而言，其直接操作的对象是文件句柄，也就是我们所说的&lt;code&gt;fd&lt;/code&gt;。&lt;code&gt;fd&lt;/code&gt;经&lt;code&gt;file descriptor table&lt;/code&gt;映射之后指向一个 &lt;em&gt;file&lt;/em&gt; 对象（多个fd可能指向同一个 &lt;em&gt;file&lt;/em&gt; 对象，比如&lt;code&gt;dup&lt;/code&gt;得到的fd），而一个 &lt;em&gt;file&lt;/em&gt; 对象指向一个VFS全局的 &lt;em&gt;dentry&lt;/em&gt; 对象（因为hardlink，多个 &lt;em&gt;file&lt;/em&gt; 对象可能指向同一个 &lt;em&gt;dentry&lt;/em&gt; 对象），而一个 &lt;em&gt;dentry&lt;/em&gt; 对象指向 &lt;em&gt;inode&lt;/em&gt; 对象（两者之间1对1关系），&lt;strong&gt;最终VFS通过 &lt;em&gt;inode&lt;/em&gt; 信息进行相应的文件操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读写文件之前，需要获取 &lt;em&gt;inode&lt;/em&gt; 是理解haystack文章的关键点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;superblock&lt;/em&gt; 通常在文件系统挂载后就加载进内存，因此不会对单次文件访问带来性能影响。而 &lt;em&gt;file&lt;/em&gt;，&lt;em&gt;dentry&lt;/em&gt; 是由VFS构造的纯内存对象，不需要从磁盘加载，也可以认为没有性能影响。只有 &lt;em&gt;inode&lt;/em&gt; 需要通过具体的文件系统构造。通常情况下，VFS在获取文件对应的 &lt;em&gt;inode&lt;/em&gt; 时需要访问磁盘，文件系统驱动将从磁盘中拷贝（如ext2/3/4文件系统在磁盘上保存了inode信息，其它文件系统不一定保存了和内存中一样的_inode_结构体，但也需要访问磁盘构造VFS &lt;em&gt;inode&lt;/em&gt;）对应的 &lt;em&gt;inode&lt;/em&gt; 。那么是不是对于任何一个文件，在对其进行读写之前都需要从磁盘加载inode呢？答案是否定的，为了加速文件查找过程的效率，Linux维护了dcache(dentry cache)，将最近访问的dentry缓存在内存中。被缓存的dentry，其指向的inode也相应地被缓存在内存当中。然而对于海量文件，我们无法做到将所有的文件inode都缓存进内存之中。&lt;/p&gt;
&lt;h2 id=&#34;haystack-&#34;&gt;haystack 介绍&lt;/h2&gt;
&lt;p&gt;haystack主要为解决facebook海量图片的存储和访问而提出。图片文件具有体积小、一次写入后多次读取、几乎无修改的特点。对Facebook而言，图片的加载速度极其影响用户体验，再加上用户规模庞大，因此haystack必须做到高并发、低延迟。&lt;/p&gt;
&lt;p&gt;CDN(Content Delivery Network, 内容分发网络)在静态文件分发中扮演者举足轻重的角色，借用haystack论文中的图来描述常见的应用场景如下。&lt;br&gt;
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200201172330.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;浏览器（用户）在请求静态资源时（这里主要关心图片，CDN也可以分发其它种类的文件)，web服务器返回CDN的资源地址。浏览器从CDN请求资源时，对于CDN，如果请求的资源在其缓存池中则直接返回，否则通过事先配置好的规则从指定的地点拉取资源并缓存，然后返回给用户。&lt;/p&gt;
&lt;p&gt;这里简单介绍下为什么通过CDN能做到高并发低延迟分发内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础设施。CDN厂商会搭建（购买、租用）很多基础网络设施，这些设施作为节点分布于全球各地。使用CDN来处理资源请求、在缓存命中的情况下能降低后端服务器的压力。&lt;/li&gt;
&lt;li&gt;就近访问。通过合理的调度、用户可以访问最近（最快）的物理节点来获取资源。&lt;/li&gt;
&lt;li&gt;专有线路。CDN厂商通常有自己的专线网络，这些专线网络相对公用网络带宽更大、网络阻塞的可能性更小。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;那么为什么CDN不能解决Facebook图片分发的问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照haystack论文中所述，CDN中只缓存了少部分访问频繁的文件，而低频的访问数量巨大，如果将所有的文件都缓存进CDN，虽然理论可行但是成本过高不符合实际。这个现象也叫做&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%95%BF%E5%B0%BE&#34;&gt;长尾效应&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;核心思想&lt;/h3&gt;
&lt;p&gt;在使用haystack之前，Facebook的图片系统使用如下图所示的架构，即若干图片服务器通过NFS的方式挂载了数个NAS存储。Facebook并没有公布其使用的NASA上具体的软件系统，不过从文章的描述来看，即使不能肯定这些NAS是Linux系统，也可以确定他们有类似上文描述的文件访问过程，即在读取文件内容之前需要先进行一次IO将对应的inode加载进内存之中。对于我们读者来说，这些NAS系统的细节我们并不需要关心，我们可以假设这些NAS就是一些Linux系统，这并不妨碍我们理解haystack的整体设计。
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200201185805.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;io&#34;&gt;读取一张图片，需要多少次IO操作？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;再简单回顾一下机械硬盘，磁盘寻址时间约10ms，顺序读取1MB数据约30ms。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设图片大小为64KB，为方便估算，我们假设这64KB的数据是连续的，也就是说只需要一次IO操作。虽然采用传统的基于block的文件系统时，这64KB的数据会分散在多个不通过的数据块中（因为数据不大，假设没有通过多级指针索引的数据块），虽然文件系统会为这64KB的数据发起多个不同的IO操作，但是因为他们是连续的块，最终经过编排调度之后也会合成一个IO操作。&lt;/p&gt;
&lt;p&gt;假设文件存放在多级目录中，在查找文件时，路径中的每一项都需要别解析成一个dentry对象，如果没有被dcache缓存住，那么也需要从磁盘加载对应的inode，也就是需要一次IO操作。同时，如果目录下的文件太多，以至于有些文件存放到目录的二级甚至三级数据索引中，并且由于目录项的查找是简单的遍历，那么需要更多的IO操作。通过调整目录项的大小或者使用更先进的一些文件系统（一些采用b-tree的文件系统），文件查找需要的IO操作可能会更小，但是我们可以认为对于一个文件至一次以上的磁盘操作用于读取其inode。&lt;/p&gt;
&lt;p&gt;我们知道哪怕仅仅是从磁盘读取一个扇区的数据，磁盘寻址时间也是一个不可忽略的开销。对于数据不大的图片而言，我们可以粗略认为有一半的额外开销都花在了读取文件的元信息之上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;haystack的主要贡献也就是提出了一种将所有图片的元信息都缓存进内存，从而加速小文件读取的优化方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;Haystack是一个分布式对象存储，主要包含三个模块：Directory、Cache和Storage。其中，Directory是一个元数据管理服务，Cache是数据缓存，而Storage是数据最终的存放地点。
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20200202165747.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（由于工作原因没有时间写细节了，以后如果再搞存储会回来补充完整。）&lt;/p&gt;
&lt;h4 id=&#34;storage&#34;&gt;Storage&lt;/h4&gt;
&lt;h4 id=&#34;directory&#34;&gt;Directory&lt;/h4&gt;
&lt;h4 id=&#34;cache&#34;&gt;Cache&lt;/h4&gt;
&lt;h2 id=&#34;10haystack&#34;&gt;过去10年了，haystack还适用吗？&lt;/h2&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;参考文献&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf&#34;&gt;haystack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Understanding the Linux kernel》&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>自动重启电信光猫</title>
      <link>http://auntlei.com/post/misc/auto_reload_model/</link>
      <pubDate>Wed, 25 Dec 2019 22:47:46 +0800</pubDate>
      
      <guid>http://auntlei.com/post/misc/auto_reload_model/</guid>
      
        <description>&lt;h2 id=&#34;heading&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;家里的WiFi总是过一点时间就会很卡，让人不爽！&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;网络布局&lt;/h3&gt;
&lt;p&gt;家里的网络布局和大多数普通家庭类似， 一个&lt;strong&gt;200M的电信宽带&lt;/strong&gt;接上一个路由器
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191225233420.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;排障流程&lt;/h3&gt;
&lt;p&gt;从拓扑图看，设备接入互联网慢可能是两个组件有问题：电信光猫或者路由器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;路由器问题？&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;对比台式电脑和移动设备之间的网速，并没有发现明显差距——都是龟速。加之路由器是新买不久的支持5G频率的千兆路由器，先大胆&lt;strong&gt;假设不是路由器故障&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;电信光猫&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在台式电脑上&lt;/strong&gt;（这点很重要，保证了整个物理链路的物理带宽为千兆) 使用上海电信官网的测试界面进行测速，结果只有1MB左右，距离200Mb/8≈25MB 还有很大距离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;初步可认定是电信光猫的问题，那么如何解决这个问题呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方案1： 电信客服投诉，报修？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据过往经验，网速有时能恢复，工人上门维修不一定能复现。另外通过微信公众号的自检，电信认定为设备正常。 工人上门也就重启下，测试正常也就离开了。 &lt;strong&gt;这显然不能解决问题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方案2： 其它？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如换移动、联通？嗯，这是在搞笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个方案都不可行。但是在电信的测速界面看到一个非常有趣的提醒，大意是“现在测速结果偏慢，但是要在重启网关之后才能保证测速准确哦”。试着重启了光猫后，还真有效！
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191225235959.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果我们假设重启光猫后网速能回归正常，那问题转变成如何自动重启光猫&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;通过路由器的剩余计算能力闲时自动重启光猫&lt;/h2&gt;
&lt;h3 id=&#34;heading-4&#34;&gt;如何自动重启光猫&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;家里的光猫可以通过web界面重启&lt;/strong&gt;， 那只需要抓包破解重启通信协议即可达成目标。&lt;/p&gt;
&lt;p&gt;本文中的光猫管理界面如下图所示：
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191225224609.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过Chrome自带的HTTP抓包结果如下&lt;/p&gt;
&lt;p&gt;登录请求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HTTP GET http://192.168.1.1/login.cgi?username=useradmin&amp;amp;psd=&amp;lt;登录密码&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;登录后可发现web界面不断地发送post请求和光猫内的服务端进行数据和指令同步&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HTTP POST http://192.168.1.1/gatewayManage.cmd?timeStamp=1577285343462&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191225225409.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中POST的body以表单形式发送，如：&lt;code&gt;jsonCfg=%7B%22RPCMethod%22%3A%22Post1%22%2C+&#39;ID&#39;%3A&#39;123&#39;%2C+%22Parameter%22%3A&#39;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ%3D%3D&#39;%7D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;URL decoded 之后为：&lt;code&gt;jsonCfg={&amp;quot;RPCMethod&amp;quot;:&amp;quot;Post1&amp;quot;, &#39;ID&#39;:&#39;123&#39;, &amp;quot;Parameter&amp;quot;:&#39;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ==&#39;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过观察多个请求，可以发现请求jsonCfg中的字段 &lt;code&gt;RPCMethod&lt;/code&gt;和&lt;code&gt;ID&lt;/code&gt;都是固定不变的， 而&lt;code&gt;Parameter&lt;/code&gt;是变化的。&lt;code&gt;Parameter&lt;/code&gt;实例是Base64编码的（因为有以&lt;code&gt;=&lt;/code&gt;结尾的，&lt;code&gt;=&lt;/code&gt;是base64编码的padding）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ==&lt;/code&gt; base64 decoded 之后为 &lt;code&gt;{&amp;quot;CmdType&amp;quot;:&amp;quot;HG_COMMAND_REBOOT&amp;quot;}&lt;/code&gt;&lt;strong&gt;从字面意思猜测，这就是重启路由器请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;URL中还有一个query参数为&lt;code&gt;timeStamp&lt;/code&gt;, 字面意思为时间戳。通过实验可知这个参数用来拒绝过期的请求（具体多长时间被视作过期没有详细测试）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按照常识，HTTP header中应该有登录之后的session id，可是没有。&lt;/strong&gt; 这种简单的不需要多用户的管理系统，没有session也很正常，可以通过登录请求记录合法IP来保护敏感资源。
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191225231258.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;于是我们可以构造如下命令来重启路由器：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 注意更新timeStamp&lt;/span&gt;
curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://192.168.1.1/gatewayManage.cmd?timeStamp=1577286579429&amp;#39;&lt;/span&gt;  --data &lt;span class=&#34;s1&#34;&gt;$&amp;#39;jsonCfg=%7B%22RPCMethod%22%3A%22Post1%22%2C+\&amp;#39;ID\&amp;#39;%3A\&amp;#39;123\&amp;#39;%2C+%22Parameter%22%3A\&amp;#39;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ%3D%3D\&amp;#39;%7D&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行后打印的http body如下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{ &amp;#34;ID&amp;#34;: 123, &amp;#34;_Source&amp;#34;: 0, &amp;#34;Result&amp;#34;: 0, &amp;#34;return_Parameter&amp;#34;: &amp;#34;eyAiQ21kVHlwZSI6ICJIR19DT01NQU5EX1JFQk9PVCIsICJTZXF1ZW5jZUlkIjogbnVsbCwgIlN0YXR1cyI6ICIwIiB9&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;return_Parameter&lt;/code&gt; base64解码后为&lt;code&gt;{ &amp;quot;CmdType&amp;quot;: &amp;quot;HG_COMMAND_REBOOT&amp;quot;, &amp;quot;SequenceId&amp;quot;: null, &amp;quot;Status&amp;quot;: &amp;quot;0&amp;quot; }&lt;/code&gt;。 根据经验，一般0表示执行成功。&lt;/p&gt;
&lt;p&gt;执行后光猫的管理界面便不能打开，一小段时间之后才能再次反问。通过查看光猫的运行状态（运行时间），证实了刚才的重启是有效的！
&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191226002901.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-5&#34;&gt;如何通过路由器自动定时重启光猫？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路由器&lt;/strong&gt;（注意不是光猫）可以ssh登录, 有一个精简的linux系统，有一整套的busybox。路由器也刷了梅林固件，当然也可以安装其他软件，甚至Python。解决方案多种多样，比如下面的shell 脚本。&lt;a href=&#34;https://www.shellscript.sh/&#34;&gt;shell 脚本教程&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; : &lt;span class=&#34;c1&#34;&gt;# 死循环&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Date: &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date +%H&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$hour&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reboot modem&amp;#34;&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# login&lt;/span&gt;
		curl &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://192.168.1.1/login.cgi?username=useradmin&amp;amp;psd=密码&amp;#34;&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# reboot&lt;/span&gt;
		curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://192.168.1.1/gatewayManage.cmd?timeStamp=2555758215000&amp;#39;&lt;/span&gt;  --data &lt;span class=&#34;s1&#34;&gt;$&amp;#39;jsonCfg=%7B%22RPCMethod%22%3A%22Post1%22%2C+\&amp;#39;ID\&amp;#39;%3A\&amp;#39;123\&amp;#39;%2C+%22Parameter%22%3A\&amp;#39;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ%3D%3D\&amp;#39;%7D&amp;#39;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
	sleep &lt;span class=&#34;m&#34;&gt;3600&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 1小时唤醒一次&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;时间戳2555758215000 是2050年的一个时间。实验可知时间戳判断逻辑过于简单：当前时间-timestamp &amp;gt; 阈值 就认为过期。我们传一个比当前时间更后的时间是一种取巧的hack方式，当然也可以通过 &lt;code&gt;date +%s&lt;/code&gt;来获取时间，但是没有必要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;脚本每小时唤醒一次，在凌晨4点触发重启。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;脚本需要放到一个&lt;strong&gt;非临时存储&lt;/strong&gt;，注意不要保存在路由器的tmpfs&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;admin@RT-AC68P:/tmp/home/root# ls -l /root
lrwxrwxrwx    1 admin    root            13 Sep 21 14:13 /root -&amp;gt; tmp/home/root
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;nohup&lt;/code&gt; 来保证脚本持续运行。 当然也可以研究下你的路由器支持哪种开机自动运行的能力(比如&lt;code&gt;/etc/init.d&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然更方便的是利用梅林固件的服务脚本和cru定时任务管理器。&lt;/p&gt;
&lt;h4 id=&#34;cru&#34;&gt;使用梅林固件的定时任务软件&lt;code&gt;cru&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;首先我们需要打开jffs分区。这是个非临时存储，换言之就是在路由器重启之后数据不会丢失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191227215121.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将脚本脚本放到指定目录&lt;code&gt;/jffs/scripts/&lt;/code&gt;, 并且添加可执行权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &amp;gt; /tmp/modem_reboot.log
curl &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://192.168.1.1/login.cgi?username=useradmin&amp;amp;psd=密码&amp;#34;&lt;/span&gt;
curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://192.168.1.1/gatewayManage.cmd?timeStamp=2555758215000&amp;#39;&lt;/span&gt;  --data &lt;span class=&#34;s1&#34;&gt;$&amp;#39;jsonCfg=%7B%22RPCMethod%22%3A%22Post1%22%2C+\&amp;#39;ID\&amp;#39;%3A\&amp;#39;123\&amp;#39;%2C+%22Parameter%22%3A\&amp;#39;eyJDbWRUeXBlIjoiSEdfQ09NTUFORF9SRUJPT1QifQ%3D%3D\&amp;#39;%7D&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/modem_reboot.log
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;对脚本进行了进一步的完善，其中3行，将&lt;strong&gt;最近一次&lt;/strong&gt;执行时间写进文件日志文件&lt;code&gt;/tmp/modem_reboot.log&lt;/code&gt;, 最后一行将重启结果也写进了日志。 &lt;strong&gt;程序猿要以数据说话，不能靠感觉&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脚本可以选择不同的启动时间，由于是重启光猫，可以选择了&lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/User-scripts&#34;&gt;post-mount，即jffs刚被挂载好便触发
&lt;/a&gt;。 将下面的代码添加至&lt;code&gt;/jffs/scripts/post-mount&lt;/code&gt;文件中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# automatically reboot my model to 04:00 am every day&lt;/span&gt;
cru a rebootmodem &lt;span class=&#34;s2&#34;&gt;&amp;#34;0 4 * * * /jffs/scripts/auto_reboot_modem.sh&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为了验证&lt;code&gt;post-mount&lt;/code&gt; 是否会触发，可以重启&lt;strong&gt;路由器&lt;/strong&gt;（not 光猫）， 然后&lt;code&gt;cru l&lt;/code&gt;查看任务&#39;rebootmodem&amp;rsquo; 是否存在。如果你能看到如下内容，说明我们的脚本配置成功，cron job已经被添加。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;admin@RT-AC68P:/tmp/home/root# cru l
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; * * * /jffs/scripts/auto_reboot_modem.sh &lt;span class=&#34;c1&#34;&gt;#rebootmodem#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;最后附上次日清晨的日志文件内容，证明整个方案是可靠的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;admin@RT-AC68P:/tmp/home/root# cat /tmp/modem_reboot.log
Sat Dec 28 04:00:01 GMT 2019
{ &amp;#34;ID&amp;#34;: 123, &amp;#34;_Source&amp;#34;: 0, &amp;#34;Result&amp;#34;: 0, &amp;#34;return_Parameter&amp;#34;: &amp;#34;eyAiQ21kVHlwZSI6ICJIR19DT01NQU5EX1JFQk9PVCIsICJTZXF1ZW5jZUlkIjogbnVsbCwgIlN0YXR1cyI6ICIwIiB9&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/20191228102807.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang UDP 服务端实现</title>
      <link>http://auntlei.com/post/net/udp/</link>
      <pubDate>Fri, 20 Dec 2019 13:26:45 +0800</pubDate>
      
      <guid>http://auntlei.com/post/net/udp/</guid>
      
        <description>&lt;h2 id=&#34;heading&#34;&gt;协议特点&lt;/h2&gt;
&lt;p&gt;简单地对IP协议进行了一层包裹，添加了源、目的地端口，从而支持了多路复用、多路分解. 协议本身没有流控测流和拥塞控制策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaoqihai.oss-cn-shanghai.aliyuncs.com/img/udp-header.png&#34; alt=&#34;UDP 包头&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;好处&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首部小， UDP 8字节， TCP20字节&lt;/li&gt;
&lt;li&gt;应用层能更加精确地控制发送数据的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;缺点，使用注意事项&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不可靠。协议本身不保证应用层的数据，一定能完全达到目的地。但是每个UDP 包裹本身是数据是不会出错（UDP本身有校验和）&lt;/li&gt;
&lt;li&gt;在网络上可能被很多节点的防火墙禁用掉&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;udp&#34;&gt;常见的使用UDP的应用层协议&lt;/h3&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;h2 id=&#34;golang-udp-server&#34;&gt;golang 实现简单的UDP server&lt;/h2&gt;
&lt;p&gt;可以自己手动定义协议，但是考虑到易用性和以后升级的需要，可以简单得使用protobuf 来定义以及序列化。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Serve &amp;#34;监听&amp;#34;一个UDP端口，如&amp;#34;0.0.0.0:9527&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SimpleUDPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenPacket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;udp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 如果会使用到公网，UDP的包尽量不要太大, 500 字节内为宜
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// https://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 这里的maxBufferSize 应该 &amp;gt; 你设计的协议中最大包的大小
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxBufferSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to receive udp packet: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 新启一个goroutine 来处理请求。主goroutine 不处理除了接受包之外的其它任何
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SimpleUDPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>
